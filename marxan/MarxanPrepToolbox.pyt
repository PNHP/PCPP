#-------------------------------------------------------------------------------
# Name:        MarxanPrepToolbox.py
# Purpose:     The purpose of the Marxan Prep Toolbox is to provide several
#              tools that aid in the preparation of a Marxan database. Prior to
#              running these tools, the user must have prepared a 'Cost' layer
#              and a .csv of species names, species codes, 'prop' (conservation
#              target), and 'spf' (species penalty factor).
#
# Author:      MMOORE
#              Western Pennsylvania Conservancy
#              Pennsylvania Natural Heritage Program
#
# Created:     06/09/2018
#-------------------------------------------------------------------------------

# import system modules
import arcpy, os, datetime
from arcpy import env
from arcpy.sa import *

# Set tools to overwrite existing outputs
arcpy.env.overwriteOutput = True

class Toolbox(object):
    def __init__(self):
        self.label = "MarxanPrepToolbox"
        self.alias = "Marxan Preparation Tools"

        # List of tool classes associated with this toolbox
        self.tools = [CreateMarxanDatabase, CreateMarxanGrid, CreatePUDAT, CreateBOUNDDAT, CreateSPECDAT,CreatePUxSPEC]

class CreateMarxanDatabase(object):
    def __init__(self):
        self.label = "1. Create Marxan Database"
        self.description = """This tool generates the template for the folder
        structure and input.dat file for your Marxan database"""
        self.canRunInBackground = False
        self.category = "Marxan Database Template Tools"

    def getParameterInfo(self):
        location = arcpy.Parameter(
            displayName = "Folder where Marxan template database will be saved",
            name = "location",
            datatype = "DEFolder",
            parameterType = "Required",
            direction = "Input")

        folder_name = arcpy.Parameter(
            displayName = "Name of Marxan template database",
            name = "folder_name",
            datatype = "GPString",
            parameterType = "Required",
            direction = "Input")

        params = [location,folder_name]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, params):
        return

    def updateMessages(self, params):
        return

    def execute(self, params, messages):
        location = params[0].valueAsText
        name = params[1].valueAsText

        marxan_db = os.path.join(location, name)
        os.makedirs(marxan_db)

        os.makedirs(os.path.join(marxan_db,"input"))
        os.makedirs(os.path.join(marxan_db,"output"))
        os.makedirs(os.path.join(marxan_db,"pulayer"))

        f = open(os.path.join(marxan_db,"input.dat"), "a+")
        f.write("Input file for Annealing program.\n\n")
        f.write("This file generated by QMarxanTools \n")
        f.write("created by Apropos Information Systems Inc. \n\n")
        f.write("General Parameters \n")
        f.write("VERSION 0.1 \n")
        f.write("BLM 0 \n")
        f.write("PROP 5.00000000000000E-0001 \n")
        f.write("RANDSEED -1 \n")
        f.write("NUMREPS 100 \n\n")
        f.write("Annealing Parameters \n")
        f.write("NUMITNS 1000000 \n")
        f.write("STARTTEMP -1.00000000000000E+0000 \n")
        f.write("COOLFAC -1.00000000000000E+0000 \n")
        f.write("NUMTEMP 10000 \n\n")

        f.write("Cost Threshold \n")
        f.write("COSTTHRESH 0.00000000000000E+0000 \n")
        f.write("THRESHPEN1 0.00000000000000E+0000 \n")
        f.write("THRESHPEN2 0.00000000000000E+0000 \n\n")

        f.write("Input Files \n")
        f.write("INPUTDIR input \n")
        f.write("SPECNAME spec.dat \n")
        f.write("PUNAME pu.dat \n")
        f.write("PUVSPRNAME puvspr.dat \n")
        f.write("BOUNDNAME bound.dat \n\n\n")


        f.write("Save Files \n")
        f.write("SCENNAME output_blm_0 \n")
        f.write("SAVERUN 3 \n")
        f.write("SAVEBEST 3 \n")
        f.write("SAVESUMMARY 3 \n")
        f.write("SAVESCEN 3 \n")
        f.write("SAVETARGMET 3 \n")
        f.write("SAVESUMSOLN 3 \n")
        f.write("SAVELOG 3 \n")
        f.write("SAVESNAPSTEPS 0 \n")
        f.write("SAVESNAPCHANGES 0 \n")
        f.write("SAVESNAPFREQUENCY 0 \n")
        f.write("OUTPUTDIR output \n")
        f.write("%sProgram control. \n")
        f.write("RUNMODE 1 \n")
        f.write("MISSLEVEL 9.50000000000000E-0001 \n")
        f.write("ITIMPTYPE 1 \n")
        f.write("HEURTYPE -1 \n")
        f.write("CLUMPTYPE 0 \n")
        f.write("VERBOSITY 2 \n")
        f.write("SAVESOLUTIONSMATRIX 3")
        f.close()
        return

class CreateMarxanGrid(object):
    def __init__(self):
        self.label = "2. Create Marxan Grid"
        self.description = """This tool generates a grid and assigns a unique
        numerical ID to all zones to be used as planning units for Marxan"""
        self.canRunInBackground = False
        self.category = "Planning Unit Grid Tools"

    def getParameterInfo(self):
        extent = arcpy.Parameter(
            displayName = "Extent of Grid (select feature layer or raster)",
            name = "extent",
            datatype = "GPLayer",
            parameterType = "Required",
            direction = "Input")

        grid_shape = arcpy.Parameter(
            displayName = "Shape of Grid",
            name = "grid_shape",
            datatype = "GPString",
            parameterType = "Required",
            direction = "Input")
        grid_shape.filter.type = "ValueList"
        grid_shape.filter.list = ["HEXAGON","SQUARE","TRIANGLE"]

        size = arcpy.Parameter(
            displayName = "Area of Planning Unit",
            name = "size",
            datatype = "GPArealUnit",
            parameterType = "Required",
            direction = "Input")

        marxan_db = arcpy.Parameter(
            displayName = "Existing Marxan Database Folder",
            name = "marxan_db",
            datatype = "DEFolder",
            parameterType = "Required",
            direction = "Input")

        params = [extent, grid_shape, size, marxan_db]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, params):
        return

    def updateMessages(self, params):
        return

    def execute(self, params, messages):
        extent = params[0].valueAsText
        grid_shape = params[1].valueAsText
        size = params[2].valueAsText
        marxan_db = params[3].valueAsText

        arcpy.env.workspace = "in_memory"

        pulayer = arcpy.GenerateTessellation_management("pulayer",extent,grid_shape,size)
        grid_lyr = arcpy.MakeFeatureLayer_management(pulayer,"grid_lyr")
        arcpy.SelectLayerByLocation_management(grid_lyr,"INTERSECT",extent,"","NEW_SELECTION","INVERT")
        arcpy.DeleteFeatures_management(grid_lyr)
        arcpy.AddField_management(grid_lyr,"id","LONG",0)

        i = 1
        with arcpy.da.UpdateCursor(pulayer,"id") as cursor:
            for row in cursor:
                row[0] = i
                cursor.updateRow(row)
                i+=1

        arcpy.CopyFeatures_management(pulayer,os.path.join(marxan_db,"pulayer","pulayer.shp"))
        return

class CreatePUDAT(object):
    def __init__(self):
        self.label = "3. Create pu.dat File"
        self.description = """This tool calculates cost and status fields and
        exports pu.dat to proper location in Marxan database"""
        self.canRunInBackground = False
        self.category = "Planning Unit Grid Tools"

    def getParameterInfo(self):
        MarxanDB = arcpy.Parameter(
            displayName = "Select Marxan Database Folder (should have planning unit shapefile included in 'pulayer' folder)",
            name = "MarxanDB",
            datatype = "DEFolder",
            parameterType = "Required",
            direction = "Input")

        cost = arcpy.Parameter(
            displayName = "Cost Raster",
            name = "cost",
            datatype = "GPRasterLayer",
            parameterType = "Required",
            direction = "Input")

        stat = arcpy.Parameter(
            displayName = "Statistic Type (how to aggregate cost values within PU)",
            name = "stat",
            datatype = "GPString",
            parameterType = "Required",
            direction = "Input")

        stat.filter.type = "ValueList"
        stat.filter.list = ["MEAN","MAJORITY","MEDIAN","SUM"]

        protected_lands = arcpy.Parameter(
            displayName = "Protected Lands Layer",
            name = "protected_lands",
            datatype = "GPLayer",
            parameterType = "Required",
            direction = "Input")

        threshold = arcpy.Parameter(
            displayName = "Percent Threshold to Determine if Planning Unit is Considered Protected",
            name = "threshold",
            datatype = "GPLong",
            parameterType = "Required",
            direction = "Input")

        params = [MarxanDB,cost,stat,protected_lands,threshold]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, params):
        return

    def updateMessages(self, params):
        return

    def execute(self, params, messages):
        MarxanDB = params[0].valueAsText
        cost = params[1].valueAsText
        stat = params[2].valueAsText
        protected_lands = params[3].valueAsText
        threshold = params[4].valueAsText

        arcpy.env.workspace = "in_memory"

        pulayer = os.path.join(MarxanDB,"pulayer","pulayer.shp")

        zone_stat = ZonalStatisticsAsTable(pulayer,"id",cost,"zone_stat","",stat)
        arcpy.AlterField_management(zone_stat,stat,"cost")

        with arcpy.da.UpdateCursor(zone_stat,"cost") as cursor:
            for row in cursor:
                row[0] = round(row[0],1)
                cursor.updateRow(row)
        arcpy.JoinField_management(pulayer,"id",zone_stat,"id","cost")

        dissolve_pad = arcpy.Dissolve_management(protected_lands,"dissolve_pad","","","MULTI_PART")
        tab_intersect = arcpy.TabulateIntersection_analysis(pulayer,"id",dissolve_pad,"tab_intersect")

        arcpy.AddField_management(tab_intersect,"status","SHORT")
        with arcpy.da.UpdateCursor(tab_intersect,["PERCENTAGE","status"]) as cursor:
            for row in cursor:
                if row[0] >= int(threshold):
                    row[1] = 2
                    cursor.updateRow(row)
                elif row[0] < int(threshold):
                    row[1] = 0
                    cursor.updateRow(row)

        arcpy.JoinField_management(pulayer,"id",tab_intersect,"id","status")

        pu_dat = os.path.join(MarxanDB,"input","pu.dat")

        fields = ["id","cost","status"]

        with open(pu_dat, "a+") as f:
            f.write('\t'.join(fields)+'\n')
            with arcpy.da.SearchCursor(pulayer,fields) as cursor:
                for row in cursor:
                    f.write('\t'.join([str(r) for r in row])+'\n')
        f.close()
        return

class CreateBOUNDDAT(object):
    def __init__(self):
        self.label = "4. Create bound.dat File"
        self.description = """This tool calculates boundary length between
        planning units and exports bound.dat to proper location in Marxan database"""
        self.canRunInBackground = False
        self.category = "Planning Unit Grid Tools"

    def getParameterInfo(self):
        MarxanDB = arcpy.Parameter(
            displayName = "Select Marxan Database Folder (should have planning unit shapefile included in 'pulayer' folder)",
            name = "MarxanDB",
            datatype = "DEFolder",
            parameterType = "Required",
            direction = "Input")

        params = [MarxanDB]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, params):
        return

    def updateMessages(self, params):
        return

    def execute(self, params, messages):
        MarxanDB = params[0].valueAsText

        arcpy.env.workspace = "in_memory"

        pulayer = os.path.join(MarxanDB,"pulayer","pulayer.shp")

        poly_neighbors = arcpy.PolygonNeighbors_analysis(pulayer,"poly_neighbors","id")

        arcpy.AlterField_management(poly_neighbors,"src_id","id1")
        arcpy.AlterField_management(poly_neighbors,"nbr_id","id2")
        arcpy.AlterField_management(poly_neighbors,"LENGTH","boundary")

        bound_dat = os.path.join(MarxanDB,"input","bound.dat")

        fields = ["id1","id2","boundary"]

        with open(bound_dat, "a+") as f:
            f.write('\t'.join(fields)+'\n')
            with arcpy.da.SearchCursor(poly_neighbors, fields) as cursor:
                for row in cursor:
                    f.write('\t'.join([str(r) for r in row])+'\n')
        f.close()
        return

class CreateSPECDAT(object):
    def __init__(self):
        self.label = "5. Create spec.dat File"
        self.description = """This tool calculates cost and status fields and
        exports pu.dat to proper location in Marxan database"""
        self.canRunInBackground = False
        self.category = "Species Prep Tool"

    def getParameterInfo(self):
        MarxanDB = arcpy.Parameter(
            displayName = "Select Marxan Database Folder",
            name = "MarxanDB",
            datatype = "DEFolder",
            parameterType = "Required",
            direction = "Input")

        species_lyr = arcpy.Parameter(
            displayName = "Species Layer",
            name = "species_lyr",
            datatype = "GPLayer",
            parameterType = "Required",
            direction = "Input")

        elsubid1 = arcpy.Parameter(
            displayName = "Element Subnational ID Field in Species Layer",
            name = "elsubid1",
            datatype = "Field",
            parameterType = "Required",
            direction = "Input")

        elsubid1.parameterDependencies = [species_lyr.name]

        species_csv = arcpy.Parameter(
            displayName = "Species CSV (includes 'prop' and 'spf' values)",
            name = "species_csv",
            datatype = "DEFile",
            parameterType = "Required",
            direction = "Input")

        elsubid2 = arcpy.Parameter(
            displayName = "Element Subnational ID Field in Species CSV",
            name = "elsubid2",
            datatype = "Field",
            parameterType = "Required",
            direction = "Input")

        elsubid2.parameterDependencies = [species_csv.name]

        sname = arcpy.Parameter(
            displayName = "Species Name Field used as Descriptor",
            name = "sname",
            datatype = "Field",
            parameterType = "Required",
            direction = "Input")

        sname.parameterDependencies = [species_csv.name]

        params = [MarxanDB,species_lyr,elsubid1,species_csv,elsubid2,sname]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, params):
        return

    def updateMessages(self, params):
        return

    def execute(self, params, messages):
        MarxanDB = params[0].valueAsText
        species_lyr = params[1].valueAsText
        elsubid1 = params[2].valueAsText
        species_csv = params[3].valueAsText
        elsubid2 = params[4].valueAsText
        sname = params[5].valueAsText

        arcpy.env.workspace = "in_memory"

        arcpy.AddMessage("copying spec_table")
        spec_table = arcpy.TableToTable_conversion(species_lyr,env.workspace,"spec_table")
        arcpy.AddMessage("delete identical")
        arcpy.DeleteIdentical_management(spec_table,elsubid1)

        arcpy.AddMessage("copying lu_spec")
        lu_spec = arcpy.TableToTable_conversion(species_csv,env.workspace,"lu_spec")

        arcpy.AddMessage("joining fields")
        arcpy.JoinField_management(spec_table,elsubid1,lu_spec,elsubid2,[sname,"prop","spf"])

        arcpy.AddMessage("altering elsubid1")
        arcpy.AlterField_management(spec_table,elsubid1,"id")
        arcpy.AddMessage("altering sname")
        arcpy.AlterField_management(spec_table,sname,"name")

        spec_dat = os.path.join(MarxanDB,"input","spec.dat")

        fields = ["id","name","prop","spf"]

        with open(spec_dat, "a+") as f:
            f.write('\t'.join(fields)+'\n')
            with arcpy.da.SearchCursor(spec_table,fields) as cursor:
                for row in cursor:
                    f.write('\t'.join([str(r) for r in row])+'\n')
        f.close()
        return

class CreatePUxSPEC(object):
    def __init__(self):
        self.label = "6. Create puvspr.dat File"
        self.description = """This tool calculates area of overlap of species
        witin each planning unit"""
        self.canRunInBackground = False
        self.category = "Species Prep Tool"

    def getParameterInfo(self):
        MarxanDB = arcpy.Parameter(
            displayName = "Select Marxan Database Folder",
            name = "MarxanDB",
            datatype = "DEFolder",
            parameterType = "Required",
            direction = "Input")

        species_lyr = arcpy.Parameter(
            displayName = "Species Layer",
            name = "species_lyr",
            datatype = "GPFeatureLayer",
            parameterType = "Required",
            direction = "Input")

        elsubid1 = arcpy.Parameter(
            displayName = "Element Subnational ID Field in Species Layer",
            name = "elsubid1",
            datatype = "Field",
            parameterType = "Required",
            direction = "Input")

        elsubid1.parameterDependencies = [species_lyr.name]

        params = [MarxanDB,species_lyr,elsubid1]
        return params

    def isLicensed(self):
        return True

    def updateParameters(self, params):
        return

    def updateMessages(self, params):
        return

    def execute(self, params, messages):
        MarxanDB = params[0].valueAsText
        species_lyr = params[1].valueAsText
        elsubid1 = params[2].valueAsText

        pu_layer = os.path.join(MarxanDB,"pulayer","pulayer.shp")

        arcpy.env.workspace = "in_memory"

        arcpy.AddMessage("tabulating area")
        pu_fc = arcpy.FeatureClassToFeatureClass_conversion(pu_layer,env.workspace,"pu_fc")
        tab_area = arcpy.TabulateIntersection_analysis(pu_fc,"id",species_lyr,"tab_area",elsubid1)

        arcpy.AlterField_management(tab_area,"id","pu")
        arcpy.AlterField_management(tab_area,elsubid1,"species")
        arcpy.AlterField_management(tab_area,"AREA","amount")

        puvspr_dat = os.path.join(MarxanDB,"input","puvspr.dat")

        fields = ["species","pu","amount"]

        with open(puvspr_dat, "a+") as f:
            f.write('\t'.join(fields)+'\n')
            with arcpy.da.SearchCursor(tab_area,fields) as cursor:
                for row in cursor:
                    f.write('\t'.join([str(r) for r in row])+'\n')
        f.close()
        return