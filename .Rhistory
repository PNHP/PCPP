} else {
lu_sgcn <<- lu_sgcn[which(lu_sgcn$TaxaGroup==taxagroup),] # limit by taxagroup code
sgcnlist <<- unique(lu_sgcn$SNAME)
}
dbDisconnect(db) # disconnect the db
}
# read in SGCN data
loadSGCN()
#paths to POND feature service layers
pond_pts <- 'https://maps.waterlandlife.org/arcgis/rest/services/PNHP/POND/FeatureServer/0'
pond_species <- 'https://maps.waterlandlife.org/arcgis/rest/services/PNHP/POND/FeatureServer/3'
arc.check_product()
species_fields <- c('refcode','wpc_id','species_type','sname','species_found')
s <- arc.open(pond_species)
s <- arc.open(pond_pts)
#paths to POND feature service layers
pond_pts <- 'https://maps.waterlandlife.org/arcgis/rest/services/PNHP/POND/FeatureServer/0'
pond_species <- 'https://maps.waterlandlife.org/arcgis/rest/services/PNHP/POND/FeatureServer/3'
arc.check_product()
species_fields <- c('refcode','wpc_id','species_type','sname','species_found')
s <- arc.open(pond_species)
#paths to POND feature service layers
pond_pts <- 'https://maps.waterlandlife.org/arcgis/rest/services/PNHP/POND/FeatureServer/0'
pond_species <- 'https://maps.waterlandlife.org/arcgis/rest/services/PNHP/POND/FeatureServer/3'
arc.check_product()
species_fields <- c('refcode','wpc_id','species_type','sname','species_found')
s <- arc.open(pond_species)
#paths to POND feature service layers
pond_pts <- 'https://maps.waterlandlife.org/arcgis/rest/services/PNHP/POND/FeatureServer/0'
pond_species <- 'https://maps.waterlandlife.org/arcgis/rest/services/PNHP/POND/FeatureServer/3'
arc.check_product()
#load packages
if (!requireNamespace("arcgisbinding", quietly=TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
if (!requireNamespace("dplyr", quietly=TRUE)) install.packages("dplyr")
require(dplyr)
if (!requireNamespace("sf", quietly=TRUE)) install.packages("sf")
require(sf)
if (!requireNamespace("plyr", quietly = TRUE)) install.packages("plyr")
require(plyr)
# read in SGCN data
loadSGCN()
#paths to POND feature service layers
pond_pts <- 'https://maps.waterlandlife.org/arcgis/rest/services/PNHP/POND/FeatureServer/0'
pond_species <- 'https://maps.waterlandlife.org/arcgis/rest/services/PNHP/POND/FeatureServer/3'
arc.check_product()
arc.check_product()
#load packages
if (!requireNamespace("arcgisbinding", quietly=TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
if (!requireNamespace("dplyr", quietly=TRUE)) install.packages("dplyr")
require(dplyr)
if (!requireNamespace("sf", quietly=TRUE)) install.packages("sf")
require(sf)
if (!requireNamespace("plyr", quietly = TRUE)) install.packages("plyr")
require(plyr)
arc.check_product()
if (!requireNamespace("here", quietly = TRUE)) install.packages("here")
require(here)
here::here("scripts","SGCN_DataCollection","00_PathsAndSettings.r")
# Created: 2019-10-21
# Updated:
#
# Updates:
#
#
# To Do List/Future Ideas:
# *
#---------------------------------------------------------------------------------------------
# load packages
if (!requireNamespace("arcgisbinding", quietly = TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
if (!requireNamespace("here", quietly = TRUE)) install.packages("here")
require(here)
if (!requireNamespace("sf", quietly = TRUE)) install.packages("sf")
require(sf)
if (!requireNamespace("rgdal", quietly = TRUE)) install.packages("rgdal")
require(rgdal)
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
require(dplyr)
source(here::here("scripts","SGCN_DataCollection","00_PathsAndSettings.r"))
sgcn_folder <- here::here("_data/output/SGCN.gdb")
subset(ogrDrivers(), grepl("GDB", name))
fc_list <- ogrListLayers(sgcn_folder)
final_list <- fc_list[grepl("final",fc_list)]
sgcn_folder <- here::here("_data/output/SGCN.gdb")
source('C:/_COA/COA_Tools/scripts/00_PathsAndSettings.r')
# load packages
if (!requireNamespace("RSQLite", quietly=TRUE)) install.packages("RSQLite")
require(RSQLite)
if (!requireNamespace("openxlsx", quietly=TRUE)) install.packages("openxlsx")
require(openxlsx)
if (!requireNamespace("sf", quietly = TRUE)) install.packages("sf")
require(sf)
#if (!requireNamespace("arcgisbinding", quietly = TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
require(dplyr)
if (!requireNamespace("lubridate", quietly = TRUE)) install.packages("lubridate")
require(lubridate)
if (!requireNamespace("auk", quietly = TRUE)) install.packages("auk")
require(auk)
if (!requireNamespace("reshape", quietly = TRUE)) install.packages("reshape")
require(reshape)
if (!requireNamespace("plyr", quietly = TRUE)) install.packages("plyr")
require(plyr)
if (!requireNamespace("dplyr", quietly=TRUE)) install.packages("dplyr")
require(dplyr)
# load the arcgis license
arc.check_product()
# update name
updateName <- "_update2020q2"
# create a directory for this update unless it already exists
ifelse(!dir.exists(here::here("_data","output",updateName)), dir.create(here::here("_data","output",updateName)), FALSE)
input = "C://Users//mmoore//Desktop//temp_databases//et_check//SpecID_Table.csv"
input = read.csv(input,header=TRUE)
View(input)
# load packages
if (!requireNamespace("arcgisbinding", quietly = TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
# load the arcgis license
arc.check_product()
source('~/.active-rstudio-document', echo=TRUE)
input = "C://Users//mmoore//Desktop//temp_databases//et_check//SpecID_Table.csv"
et <- "W://Heritage//Heritage_Data//Biotics_datasets.gdb//ET"
input = read.csv(input,header=TRUE)
input = "C://Users//mmoore//Desktop//temp_databases//et_check//SpecID_Table.csv"
et <- "W://Heritage//Heritage_Data//Biotics_datasets.gdb//ET"
input = read.csv(input,header=TRUE)
et <- arc.open(et)
et <- arc.select(et)
et_sf <- arc.data2sf(et,!is.null(shape)=TRUE)
et_sf <- arc.data2sf(et,is.null(shape)=TRUE)
et_sf <- arc.data2sf(et)
et_sf <- arc.data(et)
View(et)
et <- arc.select(et, where_clause = "EO_TRACK <> 'N'")
et <- "W://Heritage//Heritage_Data//Biotics_datasets.gdb//ET"
input = read.csv(input,header=TRUE)
input = "C://Users//mmoore//Desktop//temp_databases//et_check//SpecID_Table.csv"
et <- "W://Heritage//Heritage_Data//Biotics_datasets.gdb//ET"
input = read.csv(input,header=TRUE)
et <- arc.open(et)
et <- arc.select(et, where_clause = "EO_TRACK <> 'N'")
View(et)
et_noblank <- et[which(et$EO_TRACK <> "")]
et_noblank <- et[which(et$EO_TRACK != "")]
et_noblank <- et[which(et$EO_TRACK != ""),]
input_noblank <- input[which(input$TRACKING_STATUS !=""),]
View(input_noblank)
elcode_inETnotinINPUT <- setdiff(et$ELCODE,input_noblank$ELCODE)
elcode_inETnotinINPUT
View(et)
# load packages
if (!requireNamespace("arcgisbinding", quietly = TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
# load packages
if (!requireNamespace("arcgisbinding", quietly = TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
# load the arcgis license
arc.check_product()
input = "C://Users//mmoore//Desktop//temp_databases//et_check//SpecID_Table.csv"
et <- "W://Heritage//Heritage_Data//Biotics_datasets.gdb//ET"
input = read.csv(input,header=TRUE)
et <- arc.open(et)
et <- arc.select(et, where_clause = "EO_TRACK <> 'N'")
et <- "W://Heritage//Heritage_Data//Biotics_datasets.gdb//ET"
et <- arc.open(et)
et <- arc.select(et, where_clause = "EO_TRACK != 'N'")
et <- "W://Heritage//Heritage_Data//Biotics_datasets.gdb//ET"
et <- arc.open(et)
et <- arc.select(et)
et_excludeN <- et[et$EO_TRACK != 'N',]
View(et_excludeN)
et_excludeN <- et[et$EO_TRACK <> 'N',]
et_excludeN <- et[,et$EO_TRACK != 'N']
et_excludeN <- et[et$EO_TRACK != 'N',]
View(et_excludeN)
et_excludeN <- et[!et$EO_TRACK == 'N',]
View(et_excludeN)
View(et)
View(et_excludeN)
et_excludeN <- et[!which(et$EO_TRACK == 'N'),]
View(et_excludeN)
et_excludeN <- et[which(!et$EO_TRACK == 'N'),]
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
require(dplyr)
et_filter <- filter(et,et$EO_TRACK != "N")
et_filter <- filter(et,is.na(et$EO_TRACK|et$EO_TRACK != "N")
et_filter <- filter(et,is.na(et$EO_TRACK)|et$EO_TRACK != "N")
et_filter <- filter(et,is.na(et$EO_TRACK)|et$EO_TRACK != "N")
View(et_filter)
View(input)
# load packages
if (!requireNamespace("arcgisbinding", quietly = TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
require(dplyr)
# load the arcgis license
arc.check_product()
input = "C://Users//mmoore//Desktop//temp_databases//et_check//SpecID_Table.csv"
et <- "W://Heritage//Heritage_Data//Biotics_datasets.gdb//ET"
input = read.csv(input,header=TRUE)
et <- arc.open(et)
et <- arc.select(et)
# load packages
if (!requireNamespace("arcgisbinding", quietly = TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
require(dplyr)
# load the arcgis license
arc.check_product()
input = "C://Users//mmoore//Desktop//temp_databases//et_check//SpecID_Table.csv"
et <- "W://Heritage//Heritage_Data//Biotics_datasets.gdb//ET"
input = read.csv(input,header=TRUE)
et <- arc.open(et)
et <- arc.select(et)
et_filter <- filter(et,et$EO_TRACK != "N")
db_name <- "W:/Heritage/Heritage_Data/CPP/CPP_Specs/CPP_SpecID.sqlite"
db <- dbConnect(SQLite(), dbname = db_name)
if (!requireNamespace("RSQLite", quietly=TRUE)) install.packages("RSQLite")
require(RSQLite)
db <- dbConnect(SQLite(), dbname = db_name)
SQLquery <- "SELECT ELSUBID, specid, specid_2, specid_3, specid_comments FROM SpecID_Table"
spec_id <- dbGetQuery(db, statement = SQLquery)
# load packages
if (!requireNamespace("arcgisbinding", quietly = TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
require(dplyr)
if (!requireNamespace("RSQLite", quietly=TRUE)) install.packages("RSQLite")
require(RSQLite)
et <- "W://Heritage//Heritage_Data//Biotics_datasets.gdb//ET"
et <- arc.open(et)
et <- arc.select(et)
# load the arcgis license
arc.check_product()
# load packages
if (!requireNamespace("arcgisbinding", quietly = TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
require(dplyr)
if (!requireNamespace("RSQLite", quietly=TRUE)) install.packages("RSQLite")
require(RSQLite)
# load the arcgis license
arc.check_product()
et <- "W://Heritage//Heritage_Data//Biotics_datasets.gdb//ET"
et <- arc.open(et)
et <- arc.select(et)
db_name <- "W:/Heritage/Heritage_Data/CPP/CPP_Specs/CPP_SpecID.sqlite"
et_filter <- filter(et,et$EO_TRACK != "N")
db <- dbConnect(SQLite(), dbname = db_name)
SQLquery <- "SELECT ELSUBID, specid, specid_2, specid_3, specid_comments FROM SpecID_Table"
spec_id <- dbGetQuery(db, statement = SQLquery)
SQLquery <- paste("SELECT ELSUBID, specid, specid_2, specid_3, specid_comments"," FROM SpecID_Table")
spec_id <- dbGetQuery(db, statement = SQLquery)
SQLquery <- paste("SELECT ELSUBID, specid, specid_2, specid_3, specid_comments"," FROM SpecID_Table ")
spec_id <- dbGetQuery(db, statement = SQLquery)
dbDisconnect(db) # disconnect the db
source('H:/Scripts/DataManagement/CPPs/CPPSpecID_Update.R', echo=TRUE)
# load packages
if (!requireNamespace("arcgisbinding", quietly = TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
require(dplyr)
if (!requireNamespace("RSQLite", quietly=TRUE)) install.packages("RSQLite")
require(RSQLite)
# load the arcgis license
arc.check_product()
et <- "W://Heritage//Heritage_Data//Biotics_datasets.gdb//ET"
db_name <- "W:/Heritage/Heritage_Data/CPP/CPP_Specs/CPP_SpecID.sqlite"
spec_folder <- "W:/Heritage/Heritage_Data/CPP/CPP_Specs"
# load ET
et <- arc.open(et)
et <- arc.select(et)
et_filter <- filter(et,et$EO_TRACK != "N")
# load spec ids
db <- dbConnect(SQLite(), dbname = db_name)
SQLquery <- paste("SELECT ELSUBID, specid, specid_2, specid_3, specid_comments"," FROM SpecID_Table;")
spec_id <- dbGetQuery(db, statement = SQLquery)
dbDisconnect(db) # disconnect the db
# merge ET information with spec ids
spec_merge <- merge(x = spec_id, y = et, by = "ELSUBID", all.x = TRUE)
spec_columns <- c("ELSUBID","ELCODE","SNAME","SCOMNAME","specid","specid_2","specid_3","specid_comments","EO_TRACK","ER_RULE","GRANK","SRANK","SRANK_CHGDT","SRANK_RVWDT","USESA","SPROT","PBSSTATUS","PBSDATE","PBSQUAL","SGCN","SGCN_COM","SENSITV_SP")
spec_table <- spec_merge[,spec_columns]
View(spec_merge)
# merge ET information with spec ids
spec_merge <- merge(x = spec_id, y = et, by = "ELSUBID", all.x = TRUE)
spec_columns <- c("ELSUBID","ELCODE","SNAME","SCOMNAME","specid","specid_2","specid_3","specid_comments","EO_TRACK","ER_RULE","GRANK","SRANK","USESA","SPROT","PBSSTATUS","PBSDATE","PBSQUAL","SGCN","SGCN_COM","SENSITV_SP")
spec_table <- spec_merge[,spec_columns]
date <- gsub("-","",Sys.Date())
spec_table_name <- paste0("SpecID_Table_",date,".csv")
write.csv(spec_table,paste(spec_folder,spec_table_name, sep = "/"),row.names=FALSE)
if (!requireNamespace("xlsx", quietly=TRUE)) install.packages("xlsx")
require(xlsx)
if (!requireNamespace("RSQLite", quietly=TRUE)) install.packages("RSQLite")
require(RSQLite)
if (!requireNamespace("data.table", quietly=TRUE)) install.packages("data.table")
require(data.table)
if (!requireNamespace("arcgisbinding", quietly=TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
et_path <- "W:\\Heritage\\Heritage_Data\\Biotics_datasets.gdb\\ET"
et_open <- arc.open(et_path)
arc.check_product()
et_open <- arc.open(et_path)
et <- arc.select(et)
et <- arc.select(et_open)
View(et)
# subset to vascular and nonvascular plants
et_plants <- et[(substr(et$ELCODE,1,1)=="P")|(substr(et$ELCODE,1,1)=="N"), ]
et <- NULL # delete the ET dataframe as its not longer needed
# delete un-needed columns
et_plants$SWG.STATUS <- NULL
et_plants$SWG.COMMENTS <- NULL
View(et_plants)
# added rounded ranks to list
rounded_grank <- read.csv("reference_data/rounded_grank.csv",stringsAsFactors=FALSE)
loc_scripts <- "H:/Scripts/PCPP"
source(paste(loc_scripts, "0_PathsAndSettings.R", sep = "/"))
setwd(working_directory)
if (!requireNamespace("xlsx", quietly=TRUE)) install.packages("xlsx")
require(xlsx)
if (!requireNamespace("RSQLite", quietly=TRUE)) install.packages("RSQLite")
require(RSQLite)
if (!requireNamespace("data.table", quietly=TRUE)) install.packages("data.table")
require(data.table)
if (!requireNamespace("arcgisbinding", quietly=TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
loc_scripts <- "H:/Scripts/PCPP"
source(paste(loc_scripts, "0_PathsAndSettings.R", sep = "/"))
setwd(working_directory)
if (!requireNamespace("xlsx", quietly=TRUE)) install.packages("xlsx")
require(xlsx)
if (!requireNamespace("RSQLite", quietly=TRUE)) install.packages("RSQLite")
require(RSQLite)
if (!requireNamespace("data.table", quietly=TRUE)) install.packages("data.table")
require(data.table)
if (!requireNamespace("arcgisbinding", quietly=TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
loc_scripts <- "H:/Scripts/PCPP"
source(paste(loc_scripts, "0_PathsAndSettings.R", sep = "/"))
setwd(working_directory)
# path to most current PNHP ET
et_path <- "W:\\Heritage\\Heritage_Data\\Biotics_datasets.gdb\\ET"
arc.check_product()
et_open <- arc.open(et_path)
et <- arc.select(et_open)
# subset to vascular and nonvascular plants
et_plants <- et[(substr(et$ELCODE,1,1)=="P")|(substr(et$ELCODE,1,1)=="N"), ]
et <- NULL # delete the ET dataframe as its not longer needed
# delete un-needed columns
et_plants$SWG.STATUS <- NULL
et_plants$SWG.COMMENTS <- NULL
# added rounded ranks to list
rounded_grank <- read.csv("reference_data/rounded_grank.csv",stringsAsFactors=FALSE)
rounded_srank <- read.csv("reference_data/rounded_srank.csv",stringsAsFactors=FALSE)
et_plants <- merge(x=et_plants, y=rounded_grank, by="G.RANK", all.x=TRUE)
View(et_plants)
et_plants <- merge(x=et_plants, y=rounded_grank, by="GRANK", all.x=TRUE)
View(rounded_grank)
# added rounded ranks to list
rounded_grank <- read.csv("reference_data/rounded_grank.csv",stringsAsFactors=FALSE)
rounded_srank <- read.csv("reference_data/rounded_srank.csv",stringsAsFactors=FALSE)
et_plants <- merge(x=et_plants, y=rounded_grank, by="GRANK", all.x=TRUE)
et_plants <- merge(x=et_plants, y=rounded_srank, by="SRANK", all.x=TRUE)
rounded_grank <- NULL
rounded_srank <- NULL
# The following section identifies which species and subspecific taxa are present in the state and subsets the list to be just those
# find potential overlapping taxa due to subspecies/variabties
specname <- as.character(et_plants$SCIENTIFIC.NAME)
specname1 <- sub("^(.*? .*?) .*", "\\1", specname)
spec_dup <- specname1[duplicated(specname1)]
spec_dup <- spec_dup[!grepl(" x", spec_dup)] #get rid of hybrids
spec_dup <- sort(spec_dup)
spec_dup <- unique(spec_dup)
spec_sspvar <- specname[specname %like% " var. "|specname %like% " ssp. " ] ### what does this do?
# sees what records we have in Biotics
arc.check_product()
eo_ptreps <- paste(loc_eo,"eo_ptreps",sep="/") ## EO point reps to get a list of species we have records for in biotics
eo_ptreps <- arc.open(eo_ptreps)
eo_ptreps_plants <- arc.select(eo_ptreps, fields=c('ELCODE','SNAME','SCOMNAME','ELSUBID'), where_clause="ELCODE LIKE 'P%'")
eo_ptreps <- NULL
biotics_records <- unique(eo_ptreps_plants)
biotics_records <- biotics_records[order(biotics_records$SNAME),]
View(biotics_records)
# if the species is in biotics label it as so
et_plants$temp_taxostatus[et_plants$SCIENTIFIC.NAME %in% biotics_records$SNAME] <- "in biotics"
# if the species is in biotics label it as so
et_plants$temp_taxostatus[et_plants$SNAME %in% biotics_records$SNAME] <- "in biotics"
View(et_plants)
if (!requireNamespace("RSQLite", quietly=TRUE)) install.packages("RSQLite")
require(RSQLite)
if (!requireNamespace("data.table", quietly=TRUE)) install.packages("data.table")
require(data.table)
if (!requireNamespace("arcgisbinding", quietly=TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
loc_scripts <- "H:/Scripts/PCPP"
source(paste(loc_scripts, "0_PathsAndSettings.R", sep = "/"))
setwd(working_directory)
# path to most current PNHP ET
et_path <- "W:\\Heritage\\Heritage_Data\\Biotics_datasets.gdb\\ET"
arc.check_product()
et_open <- arc.open(et_path)
et <- arc.select(et_open)
# subset to vascular and nonvascular plants
et_plants <- et[(substr(et$ELCODE,1,1)=="P")|(substr(et$ELCODE,1,1)=="N"), ]
et <- NULL # delete the ET dataframe as its not longer needed
# delete un-needed columns
et_plants$SWG.STATUS <- NULL
View(et_plants)
# added rounded ranks to list
rounded_grank <- read.csv("reference_data/rounded_grank.csv",stringsAsFactors=FALSE)
rounded_srank <- read.csv("reference_data/rounded_srank.csv",stringsAsFactors=FALSE)
# added rounded ranks to list
rounded_grank <- read.csv("reference_data/rounded_grank.csv",stringsAsFactors=FALSE)
rounded_srank <- read.csv("reference_data/rounded_srank.csv",stringsAsFactors=FALSE)
et_plants <- merge(x=et_plants, y=rounded_grank, by="GRANK", all.x=TRUE)
et_plants <- merge(x=et_plants, y=rounded_srank, by="SRANK", all.x=TRUE)
rounded_grank <- NULL
rounded_srank <- NULL
View(et_plants)
# The following section identifies which species and subspecific taxa are present in the state and subsets the list to be just those
# find potential overlapping taxa due to subspecies/variabties
specname <- as.character(et_plants$SNAME)
specname1 <- sub("^(.*? .*?) .*", "\\1", specname)
spec_dup <- specname1[duplicated(specname1)]
spec_dup <- spec_dup[!grepl(" x", spec_dup)] #get rid of hybrids
spec_dup <- sort(spec_dup)
spec_dup <- unique(spec_dup)
spec_sspvar <- specname[specname %like% " var. "|specname %like% " ssp. " ] ### what does this do?
# sees what records we have in Biotics
arc.check_product()
# sees what records we have in Biotics
eo_ptreps <- paste(loc_eo,"eo_ptreps",sep="/") ## EO point reps to get a list of species we have records for in biotics
eo_ptreps <- arc.open(eo_ptreps)
eo_ptreps_plants <- arc.select(eo_ptreps, fields=c('ELCODE','SNAME','SCOMNAME','ELSUBID'), where_clause="ELCODE LIKE 'P%'")
eo_ptreps <- NULL
biotics_records <- unique(eo_ptreps_plants)
biotics_records <- biotics_records[order(biotics_records$SNAME),]
# if the species is in biotics label it as so
et_plants$temp_taxostatus[et_plants$SNAME %in% biotics_records$SNAME] <- "in biotics"
# find the species that are not in biotics, but they have a subsp or variety
spec_sspvar_noBiotics <- et_plants$SNAME[((et_plants$SNAME %like% " var. "|et_plants$SNAME %like% " ssp. ") & is.na(et_plants$temp_taxostatus) & (et_plants$EO_TRACK!="Y"|et_plants$EO_TRACK!="W") ) ]
only_subspecific_taxa <- spec_sspvar_noBiotics[!(sub("^(.*? .*?) .*", "\\1", spec_sspvar_noBiotics) %in% et_plants$SNAME )]
spec_sspvar_noBiotics <- setdiff(spec_sspvar_noBiotics, only_subspecific_taxa )
spec_sspvar_noBiotics <- as.character(spec_sspvar_noBiotics) # droplevels
spec_sspvar_noBiotics <- na.omit(spec_sspvar_noBiotics)
# if the species is
et_plants$temp_taxostatus[et_plants$SNAME %in% spec_sspvar_noBiotics] <- "subspecific taxa, effective duplicate"
#subset out the duplicates and use this from now on!
et_plants <- et_plants[which(et_plants$temp_taxostatus!="subspecific taxa, effective duplicate"|is.na(et_plants$temp_taxostatus)),]
# rename columns to standard biotic names
names(et_plants)[names(et_plants)=="S.RANK"] <- "SRANK"
names(et_plants)[names(et_plants)=="G.RANK"] <- "GRANK"
#####################################
#get taxonomic information
taxo <- read.csv("reference_data/taxonomy.csv",stringsAsFactors=FALSE)
keeps <- c("ELEMENT_SUBNATIONAL_ID","ELCODE","CLASS","TAX_ORDER","FAMILY","GLOBAL_NAME","GLOBAL_COMNAME","PA_NAME","PA_COMNAME","CLASSIFICATION_COM","ORIGIN","REGULARITY","DIST_CONFIDENCE","CURR_PRESENCE_ABSENCE")
taxo <- taxo[keeps]
# write to the SQLite db
db <- dbConnect(SQLite(), dbname = databasename)
dbWriteTable(db, "et_plants",et_plants, overwrite=TRUE)
dbWriteTable(db, "taxo", taxo, overwrite=TRUE)
dbDisconnect(db)
# install and load necessary packages
if (!requireNamespace("arcgisbinding", quietly=TRUE)) install.packages("arcgisbinding")
require(arcgisbinding)
if (!requireNamespace("raster", quietly=TRUE)) install.packages("raster")
require(raster)
if (!requireNamespace("sf", quietly=TRUE)) install.packages("sf")
require(sf)
if (!requireNamespace("dplyr", quietly=TRUE)) install.packages("dplyr")
require(dplyr)
if (!requireNamespace("RCurl", quietly=TRUE)) install.packages("RCurl")
require(RCurl)
if (!requireNamespace("data.table", quietly=TRUE)) install.packages("data.table")
require(data.table)
if (!requireNamespace("rgdal", quietly=TRUE)) install.packages("rgdal")
require(rgdal)
# set path to bonap image folder, image geodatabase, county centroids.
image_folder <- 'W:/Heritage/Heritage_Projects/1495_PlantConservationPlan/bonap/bonap_originals'
image_gdb <- 'W:/Heritage/Heritage_Projects/1495_PlantConservationPlan/bonap/bonap_rasters.gdb'
county_centroids <- 'W:/Heritage/Heritage_Projects/1495_PlantConservationPlan/bonap/bonap.gdb/county_centroids'
et <- 'W:\Heritage\Heritage_Projects\1495_PlantConservationPlan\PCPP_DB\et_plants.csv'
et <- 'W:/Heritage/Heritage_Projects/1495_PlantConservationPlan/PCPP_DB/et_plants.csv'
url_base <- 'http://bonap.net/MapGallery/County/'
projection_file <- 'W:/Heritage/Heritage_Projects/1495_PlantConservationPlan/BONAP/bonap_projection'
et_download <- read.csv(et)
snames <- et_download$SNAME
not_downloaded <- data.frame(species=character())
for(s in snames){
u <- paste(paste0(url_base, s), "png", sep=".")
u <- gsub(' ','%20',u)
if(url.exists(u)==TRUE){
download.file(u, paste0(paste(image_folder,s, sep='/'),".tif"), mode='wb')
}
else{
print(paste0(s, " was not available for download"))
nd <- data.frame(species=s)
not_downloaded <- rbind(not_downloaded, nd)
}
}
not_down <- 'W:/Heritage/Heritage_Projects/1495_PlantConservationPlan/bonap/maps_not_downloaded.csv'
write.csv(not_downloaded, not_down)
# create list of species from file names. sub in underscores and exclude extension to match file name in GDB.
bonap_maps <- list.files(path = image_folder, pattern='\\.tif$')
bonap_maps <- gsub('\\.tif$', '', bonap_maps)
for(s in bonap_maps){
file.copy(paste0(projection_file,".tfwx"), paste0(image_folder,"/",s,".tfwx"), overwrite=TRUE)
file.copy(paste0(projection_file,".tif.aux.xml"), paste0(image_folder,"/",s,".tif.aux.xml"), overwrite=TRUE)
file.copy(paste0(projection_file,".tif.xml"), paste0(image_folder,"/",s,".tif.xml"), overwrite=TRUE)
}
